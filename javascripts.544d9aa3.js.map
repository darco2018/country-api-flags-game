{"version":3,"sources":["modulev2/player-module-v2.js","modulev2/game-module-v2.js","javascripts/index.js"],"names":["Player","playerId","id","score","getId","getScore","Number","setScore","playerScore","Error","toString","Game","gameName","numberOfTurns","name","noOfTurns","currentPlayer","undefined","players","currentTurn","getGameName","addPlayer","player","push","removePlayer","initialLength","length","filter","p","getNoOfPlayers","setNoOfTurns","getNoOfTurns","incrementTurn","resetCurrentTurn","getCurrentTurn","getCurrentPlayer","setCurrentPlayer","getWinners","result","_isDrawInternal","winners","forEach","highestScore","isDraw","frequency","map","Map","currScore","has","set","get","flagImg","document","getElementById","first","querySelector","second","third","firstInput","secondInput","thirdInput","firstCircle","secondCircle","thirdCircle","answer","form","p1Score","p2Score","p1MatchScore","p2MatchScore","resetBtn","levelNumber","matchNumber","playersNumber","NUMBER_OF_OPTIONS","gameNumer","API_URL","countryArray","correctAnswer","userAnswer","options","next","match","nextFlagAllowed","level","game","player1","player2","getUserAnswer","FormData","option","disableRadioButtons","disabled","renderAnswer","userGuessed","classList","remove","add","renderResult","updateScore","init","requestCountryData","reset","initGame","console","log","initNewMatch","innerHTML","localStorage","getItem","setItem","renderScores","currPlayer","changeTurn","generateOptionsAsIndexes","shuffle","renderCountryNamesOnBtns","extractCountryNames","setFlagUrl","extractFlag","checked","getRandomInt","generateCorrectAnswer","index","response","fetch","json","error","msg","min","max","random","Math","ceil","floor","countryNames","innerText","value","flag","src","names","countryNmb","i","array","j","temp","addEventListener","event","preventDefault"],"mappings":"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","file":"javascripts.544d9aa3.js","sourceRoot":"../src","sourcesContent":["export function Player(playerId){\n    // 1\n    const id = playerId;\n    let score = 0;\n\n\n    this.getId = () => {\n        return id;\n    }\n  \n    this.getScore = () => {\n        return Number(score);\n    }\n    // 2 3 \n    this.setScore = (playerScore) => {\n        if (playerScore < 0) {\n            throw new Error(\"Score cannot be negative\");\n        }\n        score = Number(playerScore);\n    }\n\n    this.toString = () => {\n        return \"id: \" + id + \", score: \" + score;\n    };\n}","import { Player } from \"./player-module-v2\";\n\n\n\nexport function Game(gameName, numberOfTurns) {\n    const name = gameName;\n    let noOfTurns = numberOfTurns;\n\n    let currentPlayer = undefined;\n    let players = [];\n    let currentTurn = 1;\n\n    this.getGameName = () => {\n        return name;\n    }\n\n    this.addPlayer = (player) => {\n        players.push(player);\n    }\n\n    this.removePlayer = (player) => {\n        let initialLength = players.length;\n        players = players.filter(p => p.id !== player.id);\n\n        if (initialLength === players.length) {\n            throw new Error(\"Cannot remove the player. Player not found.\");\n        }\n    }\n\n    this.getNoOfPlayers = () => {\n        return players.length;\n    }\n\n    this.setNoOfTurns = (numberOfTurns) => {\n        noOfTurns = numberOfTurns;\n    }\n\n    this.getNoOfTurns = () => {\n        return noOfTurns;\n    }\n    \n    this.incrementTurn = () => {\n        if (currentTurn < noOfTurns) {\n            currentTurn++;\n        } else {\n            throw new Error(\"Current turn can not be larger than total number of turns.\");\n        }\n    }\n\n    this.resetCurrentTurn = () => {\n        currentTurn = 1;\n    }\n\n    this.getCurrentTurn = () => {\n        return currentTurn;\n    }\n\n    this.getCurrentPlayer = () => {\n        return currentPlayer;\n    }\n\n    this.setCurrentPlayer = (player) => {\n        currentPlayer = player;\n    }\n\n    this.getWinners = () => {\n        const result = _isDrawInternal();\n        const winners = [];\n\n        players.forEach(p => {\n            if (p === result.highestScore) {\n                winners.push(p);\n            }\n        });\n        return winners;\n\n    }\n\n    this.isDraw = () => {\n        let result = this._isDrawInternal();\n        return result.frequency > 1 ? true : false;\n    }\n\n    this._isDrawInternal = () => {\n        let highestScore = 0;\n        let map = new Map();\n\n        players.forEach(p => {\n            const currScore = p.getScore();\n            highestScore = currScore > highestScore ? currScore : highestScore;\n            //let frequency = map.get(currScore);\n            // if frequency is null/undefined/0/\"\" the next line is false\n            if (map.has(currScore)) {\n                map.set(currScore, map.get(currScore) + 1);\n            } else {\n                map.set(currScore, 1);\n            }\n        });\n      \n        return {\n            highestScore: highestScore,\n            frequency: map.get(highestScore)\n        };\n\n    }\n\n    this.toString = () => {\n        return \"name: \" + name + \", noOfTurns: \" + noOfTurns + \", currTurn: \" + currentTurn + \", currPlayer: \" + currentPlayer +\n            \"\\nplayers: \" + players.toString();\n    }\n} ","import { Player } from \"../modulev2/player-module-v2\";\nimport { Game } from \"../modulev2/game-module-v2\";\n// set constants for number of options, country array\n// vars: options(array which keeps indexes), correctAnswer(index), userAnswer(index),   \n\n\n/* ----------------------- HTML elements -------------------------- */\nlet flagImg = document.getElementById(\"flag\");\nlet first = document.querySelector(\"#options .option:nth-of-type(1) label\");\nlet second = document.querySelector(\"#options .option:nth-of-type(2) label\");\nlet third = document.querySelector(\"#options .option:nth-of-type(3) label\");\nlet firstInput = document.getElementById(\"choice1\");\nlet secondInput = document.getElementById(\"choice2\");\nlet thirdInput = document.getElementById(\"choice3\");\nlet firstCircle = document.getElementById(\"circleOne\");\nlet secondCircle = document.getElementById(\"circleTwo\");\nlet thirdCircle = document.getElementById(\"circleThree\");\nlet answer = document.getElementById(\"answer\");\nlet form = document.querySelector(\"form\");\nlet p1Score = document.querySelector(\"#rightScore\");\nlet p2Score = document.querySelector(\"#leftScore\");\n\nlet p1MatchScore = document.querySelector(\"#p1MatchScore\");\nlet p2MatchScore = document.querySelector(\"#p2MatchScore\");\nlet resetBtn = document.querySelector(\"#resetBtn\");\nlet levelNumber = document.querySelector(\"#level\");\nlet matchNumber = document.querySelector(\"#matchNumber\");\nlet playersNumber = document.querySelector(\"#playersNumber\");\n// other variables \nconst NUMBER_OF_OPTIONS = 3;\nlet gameNumer = 1;\nconst API_URL = \"https://restcountries.eu/rest/v2/all\"\nlet countryArray;\nlet options = [];\nlet correctAnswer;\nlet next = document.getElementById(\"nextBtn\");\nlet userAnswer;\nlet match = 1;\nlet nextFlagAllowed = false;\nlet level = 1;\n\nlet game = new Game(\"Flag game\", 2);\nconst player1 = new Player(1);\nconst player2 = new Player(2);\ngame.addPlayer(player1);\ngame.addPlayer(player2);\ngame.setCurrentPlayer(player1);\ninit();\ninitGame();\np1Score.classList.add(\"activePlayer\");\n\n\n\nif (localStorage.getItem(\"player1\") === null) {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    renderScores()\n} else {\n    renderScores()\n}\n/* -------------------------- Event listeners ---------------------------- */\nform.addEventListener(\"submit\", function (event) {\n    let userAnswer = getUserAnswer();\n\n    nextFlagAllowed = true;\n    disableRadioButtons();\n    renderAnswer(Number(userAnswer) === correctAnswer);\n    changeTurn();\n    gameNumer++;\n    renderScores();\n    event.preventDefault();\n}, false);\n\nnext.addEventListener(\"click\", function () {\n    if (nextFlagAllowed) {\n        reset();\n        nextFlagAllowed = false;\n    }\n});\n\nresetBtn.addEventListener(\"click\", function () {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    renderScores();\n});\n\n\nfunction getUserAnswer() {\n    let userAnswer = \"\";\n    var options = new FormData(form);\n    for (const option of options) {\n        userAnswer = option[1];\n    };\n    return userAnswer;\n}\n\nfunction disableRadioButtons() {\n    firstInput.disabled = true;\n    secondInput.disabled = true;\n    thirdInput.disabled = true;\n}\n\nfunction renderAnswer(userGuessed) {\n    if (userGuessed) {\n        answer.classList.remove(\"red\");\n        answer.classList.add(\"green\");\n        renderResult(\"Correct!\");\n        updateScore();\n    }\n    else {\n        answer.classList.remove(\"green\");\n        answer.classList.add(\"red\");\n        renderResult(\"Inncorect! Correct answer is \" + countryArray[correctAnswer].name);\n    }\n}\n\n/* ------------------------------ main methods --------------------------- */\n\nasync function init() {\n    countryArray = await requestCountryData();\n    reset();\n}\n\nfunction initGame() {\n    console.log(\"Init game\");\n\n\n}\nfunction initNewMatch() {\n    answer.classList.remove(\"red\"); \n    answer.classList.remove(\"green\"); \n    if (game.isDraw()) {\n        answer.innerHTML = \"There is a draw!!!!\";\n        \n    }\n    else {\n        if (player1.getScore() > player2.getScore()) {\n            let score = localStorage.getItem(\"player1\");\n            localStorage.setItem(\"player1\", Number(score) + 1);\n            answer.innerHTML = \"player one has won.\";\n\n        }\n        else {\n            let score = localStorage.getItem(\"player2\");\n            localStorage.setItem(\"player2\", Number(score) + 1);\n            answer.innerHTML = \"player two has won.\";\n        }\n    }\n    p1Score.classList.add(\"activePlayer\"); \n    p2Score.classList.remove(\"activePlayer\");\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n}\nfunction updateScore() {\n    console.log(\"Updating score\");\n    let currPlayer = game.getCurrentPlayer();\n    currPlayer.setScore(currPlayer.getScore() + 1);\n\n}\n\nfunction changeTurn() {\n    console.log(\"Change turns\");\n    if (game.getCurrentTurn() < game.getNoOfTurns()) {\n        console.log(\"incrementing turn\");\n        game.incrementTurn();\n    } else {\n        \n        \n\n        if (game.getCurrentPlayer().getId() === player1.getId()) {\n            console.log(\"swapping players\");\n            p1Score.classList.remove(\"activePlayer\");\n            p2Score.classList.add(\"activePlayer\");            \n            game.setCurrentPlayer(player2);\n\n        } else{\n            console.log(\"Current player id\" + game.getCurrentPlayer().getId());\n            \n            console.log(\"init new match\");          \n            game.setCurrentPlayer(player1);\n            initNewMatch();\n        }\n\n        console.log(\"resetting turn to 0\");\n        game.resetCurrentTurn();\n      \n    }\n}\n\nasync function reset() {\n    \n    answer.innerHTML = \"\";\n    options = generateOptionsAsIndexes(); // 56, 78, 134\n    correctAnswer = options[0]; // 56\n    shuffle(options);\n    renderCountryNamesOnBtns(extractCountryNames());\n    setFlagUrl(extractFlag(correctAnswer));\n    firstInput.disabled = false;\n    secondInput.disabled = false;\n    thirdInput.disabled = false;\n    firstInput.checked = false;\n    secondInput.checked = false;\n    thirdInput.checked = false;\n}\n\nfunction generateOptionsAsIndexes() {\n    let opt1 = getRandomInt(0, countryArray.length);\n    let opt2 = getRandomInt(0, countryArray.length);\n    let opt3 = getRandomInt(0, countryArray.length);\n    return [opt1, opt2, opt3];\n}\n\nfunction generateCorrectAnswer(options) {\n    let index = getRandomInt(0, options.length);\n    return index;\n}\n\n\n/* ------------------------------ heplers ----------------------------- */\nasync function requestCountryData() {\n    try {\n        let response = await fetch(API_URL);\n        let countryArray = await response.json();\n        return countryArray;\n    } catch (error) {\n        console.log(error);\n    }\n}\nfunction renderResult(msg) {\n    answer.innerHTML = msg;\n}\n/**\n * Returns a random number between min (inclusive) and max(exclusive)\n */\nfunction getRandomInt(min, max) {\n    let maxExclusive = true;\n    min = Math.ceil(min);\n    max = maxExclusive ? Math.floor(max) - 1 : Math.floor(max);\n    let random = Math.floor(Math.random() * (max - min + 1)) + min;\n    return random;\n}\n\nfunction renderCountryNamesOnBtns(countryNames) {\n    first.innerText = countryArray[options[0]].name;\n    second.innerText = countryArray[options[1]].name;\n    third.innerText = countryArray[options[2]].name;\n    firstInput.value = options[0];\n    secondInput.value = options[1];\n    thirdInput.value = options[2];\n}\n\nfunction setFlagUrl(flag) {\n    flagImg.src = flag;\n}\n\nfunction extractCountryNames() {\n    let names = [];\n    let countryNmb;\n    for (let i = 0; i < options.length; i++) {\n        countryNmb = options[i];\n        names[i] = countryArray[countryNmb].name;\n    }\n    return names;\n}\n\nfunction extractFlag(correctAnswer) {\n    return countryArray[correctAnswer].flag;\n}\nfunction shuffle(array) {\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction renderScores() {\n    p1Score.innerHTML = player1.getScore() + \"/\" + game.getNoOfTurns();\n    p2Score.innerHTML = \"  :  \" + player2.getScore() + \"/\" + game.getNoOfTurns();\n    p1MatchScore.innerHTML = localStorage.getItem(\"player1\");\n    p2MatchScore.innerHTML = \"  :  \" + localStorage.getItem(\"player2\");\n    levelNumber.innerHTML = \",LEVEL: \" + level;\n    matchNumber.innerHTML = \",MATCH: \" + match;\n    playersNumber.innerHTML = \"PLAYERS: \" + game.getNoOfPlayers();\n}\n//localStorage.getItem(\"player1\") - match score\n//player1.getScore() -- actual score game.getNoOfTurns()"]}