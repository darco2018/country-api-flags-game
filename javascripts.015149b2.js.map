{"version":3,"sources":["module-game/player-module-v2.js","module-game/game-module-v2.js","module-universal/api-data-fetcher.js","module-universal/get-random-int.js","module-view/btn-utills.js","module-country-api/extract-country-names.js","module-game/update-score.js","module-view/render-result.js","module-universal/array-utilities/shuffle.js","module-view/get-user-answer.js","module-universal/array-utilities/hasDuplicates.js","module-country-api/immutable-arrays.js","module-view/set-cursor-type.js","module-persistence/persistence.js","module-game/toggle-active-player.js","module-game/restore-original-items-if-out-of-items.js","javascripts/index.js"],"names":["Player","playerId","id","score","getId","getScore","Number","setScore","playerScore","Error","toString","Game","gameName","numberOfTurns","name","noOfTurns","currentPlayer","undefined","players","currentTurn","getGameName","addPlayer","player","push","removePlayer","initialLength","length","filter","p","getNoOfPlayers","setNoOfTurns","getNoOfTurns","incrementTurn","resetCurrentTurn","getCurrentTurn","getCurrentPlayer","setCurrentPlayer","getWinners","result","_isDrawInternal","winners","forEach","highestScore","isDraw","frequency","map","Map","currScore","has","set","get","getAPIDataAsJsObjects","url","response","fetch","countryArray","json","error","console","log","getRandomInt","min","max","Math","ceil","floor","random","setRadioButtons","buttonsArray","property","isDisabled","Array","isArray","i","extractElementsProperties","chosenOptions","elementsArray","names","getLevelItemsArrMap","easyItemsMutable","mediumItemsMutable","hardItemsMutable","masterItemsMutable","levelItemsArrMap","easy","medium","hard","master","updateScore","game","currPlayer","renderResult","msg","htmlElem","innerHTML","shuffle","array","sort","getUserAnswer","buttons","userAnswer","checked","value","hasDuplicates","Set","size","getEasyArray","easyArray","getMediumArray","mediumArray","getHardArray","hardArray","getMasterArray","j","currCountry","masterArray","includes","setCursorType","htmlElements","cursorType","style","cursor","Persistence","key","localStorage","getItem","put","setItem","toggleActivePlayer","player1Score","player2Score","classList","toggle","restoreOriginalItemsIfOutOfItems","difficultyCoutriesObj","difficulty","itemsArrCoreName","eval","slice","flagImg","document","getElementById","firstOption","querySelector","secondOption","thirdOption","topRadioButton","middleRadioButton","bottomRadioButton","renderedAnswer","playerResult","optionsPanel","optionsMenuItem","player1MatchScore","player2MatchScore","resetBtn","optionsSection","gameSection","levelChoice","radioBtns","querySelectorAll","cursorClassElements","playMenuItem","nextQuestionBtn","nextQuestionBtnContainer","API_URL","player1","player2","opt2","opt3","options","correctAnswer","nextFlagAllowed","difficultyName","indexOfAnswer","masterFlagsImmutable","persistence","easyFlagsImmutable","mediumFlagsImmutable","hardFlagsImmutable","level_ItemsArr_Map","flagsPerMatch","round","init","reset","persistTotalMatchesScore","renderCurrentMatchScore","remove","add","renderTottalMatches","initNewMatch","renderMatchResult","zeroTheScores","changeTurn","generateOptionsAsIndexes","renderCountryNamesOnBtns","setFlagUrl","extractFlag","optionsRadioButtons","innerText","flag","src","generateOtherCountries","difficultyCountriesObj","mutableArray","randomIndex","opt1","splice","renderCurrentMatchEndMsg","winner","addEventListener","setQuestionNumber","currPlayerWhenChangeLVL","event","renderAnswer","preventDefault","contains","switchOptionsAndGamePage","userGuessed","changeAnswerColor"],"mappings":"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","file":"javascripts.015149b2.js","sourceRoot":"../src","sourcesContent":["export function Player(playerId){\n    // 1\n    const id = playerId;\n    let score = 0;\n\n\n    this.getId = () => {\n        return id;\n    }\n  \n    this.getScore = () => {\n        return Number(score);\n    }\n    // 2 3 \n    this.setScore = (playerScore) => {\n        if (playerScore < 0) {\n            throw new Error(\"Score cannot be negative\");\n        }\n        score = Number(playerScore);\n    }\n\n    this.toString = () => {\n        return \"id: \" + id + \", score: \" + score;\n    };\n}","import { Player } from \"./player-module-v2\";\n\n\n\nexport function Game(gameName, numberOfTurns) {\n    const name = gameName;\n    let noOfTurns = numberOfTurns;\n\n    let currentPlayer = undefined;\n    let players = [];\n    let currentTurn = 1;\n\n    this.getGameName = () => {\n        return name;\n    }\n\n    this.addPlayer = (player) => {\n        players.push(player);\n    }\n\n    this.removePlayer = (player) => {\n        let initialLength = players.length;\n        players = players.filter(p => p.id !== player.id);\n\n        if (initialLength === players.length) {\n            throw new Error(\"Cannot remove the player. Player not found.\");\n        }\n    }\n\n    this.getNoOfPlayers = () => {\n        return players.length;\n    }\n\n    this.setNoOfTurns = (numberOfTurns) => {\n        noOfTurns = numberOfTurns;\n    }\n\n    this.getNoOfTurns = () => {\n        return noOfTurns;\n    }\n    \n    this.incrementTurn = () => {\n        if (currentTurn < noOfTurns) {\n            currentTurn++;\n        } else {\n            throw new Error(\"Current turn can not be larger than total number of turns.\");\n        }\n    }\n\n    this.resetCurrentTurn = () => {\n        currentTurn = 1;\n    }\n\n    this.getCurrentTurn = () => {\n        return currentTurn;\n    }\n\n    this.getCurrentPlayer = () => {\n        return currentPlayer;\n    }\n\n    this.setCurrentPlayer = (player) => {\n        currentPlayer = player;\n    }\n    \n    this.getWinners = () => {\n        const result = _isDrawInternal();\n        const winners = [];\n\n        players.forEach(p => {\n            if (p === result.highestScore) {\n                winners.push(p);\n            }\n        });\n        return winners;\n\n    }\n\n    this.isDraw = () => {\n        let result = this._isDrawInternal();\n        return result.frequency > 1 ? true : false;\n    }\n\n    this._isDrawInternal = () => {\n        let highestScore = 0;\n        let map = new Map();\n\n        players.forEach(p => {\n            const currScore = p.getScore();\n            highestScore = currScore > highestScore ? currScore : highestScore;\n            //let frequency = map.get(currScore);\n            // if frequency is null/undefined/0/\"\" the next line is false\n            if (map.has(currScore)) {\n                map.set(currScore, map.get(currScore) + 1);\n            } else {\n                map.set(currScore, 1);\n            }\n        });\n      \n        return {\n            highestScore: highestScore,\n            frequency: map.get(highestScore)\n        };\n\n    }\n\n    this.toString = () => {\n        return \"name: \" + name + \", noOfTurns: \" + noOfTurns + \", currTurn: \" + currentTurn + \", currPlayer: \" + currentPlayer +\n            \"\\nplayers: \" + players.toString();\n    }\n} ","export async function getAPIDataAsJsObjects(url) {\n    try {\n        const response = await fetch(url);\n        const countryArray = await response.json();\n        //console.log(countryArray);\n        return countryArray;\n    }\n    catch (error) {\n        console.log(error);\n    }\n}\n","/**\n * Returns a random number between min (inclusive) and max(exclusive)\n */\nexport function getRandomInt(min, max) {\n    const maxExclusive = true;\n    min = Math.ceil(min);\n    max = maxExclusive ? Math.floor(max) - 1 : Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n    ;\n}\n","export function setRadioButtons(buttonsArray, property, isDisabled) {\n    if (typeof isDisabled != \"boolean\"){\n        throw Error(\"Third argument must be a boolean.\");\n      }\n     \n    if (Array.isArray(buttonsArray)) {\n        let i;\n        switch(property){\n            case \"disabled\":\n                for (i = 0; i < buttonsArray.length; i++) {\n                    buttonsArray[i][property] = isDisabled;\n                }\n                break;\n            case \"checked\":\n                for (i = 0; i < buttonsArray.length; i++) {\n                    buttonsArray[i][property] = isDisabled;\n                }\n                break;\n            default:\n                throw Error(\"Second argument for setRadioButtons function must be equal to checked or disabled\");\n        }\n    } else {\n        throw Error(\"First argument must be an Array.\");\n\n    }\n\n}\n","export function extractElementsProperties(chosenOptions, elementsArray, property) {\n    const names = [];\n    if (Array.isArray(chosenOptions) && Array.isArray(elementsArray)) {\n        for (let i = 0; i < chosenOptions.length; i++) {\n            names[i] = elementsArray[chosenOptions[i]].property;\n        }\n        return names;\n    } else {\n        throw Error(\"chosenOptions or elementsArray is not an array.\");\n    }\n}\n\n\nexport function getLevelItemsArrMap(easyItemsMutable, mediumItemsMutable, hardItemsMutable, masterItemsMutable) {\n\n    if (Array.isArray(easyItemsMutable) && Array.isArray(mediumItemsMutable) && Array.isArray(hardItemsMutable) && Array.isArray(masterItemsMutable)) {\n        let levelItemsArrMap = {\n            easy: easyItemsMutable,\n            medium: mediumItemsMutable,\n            hard: hardItemsMutable,\n            master: masterItemsMutable\n        };\n        return levelItemsArrMap;\n    } else {\n        throw Error(\"All arguments to getLevelItemsArrMap() must be arrays.\");\n    }\n    \n}","\nexport function updateScore(game) {\n    const currPlayer = game.getCurrentPlayer();\n    currPlayer.setScore(currPlayer.getScore() + 1);\n}\n","// xxx\nexport function renderResult(msg, htmlElem) {\n    htmlElem.innerHTML = msg;\n}\n","export function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n}\n","export function getUserAnswer(buttons) {\n    let userAnswer = \"\";\n    for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i].checked) {\n            userAnswer = buttons[i].value;\n        }\n    }\n    return userAnswer;\n}\n","export function hasDuplicates(array) {\n    if (new Set(array).size !== array.length) {\n        throw Error(\"Your Array: \" + array + \" has duplicates.\");\n    }\n}\n","import { hasDuplicates } from \"../module-universal/array-utilities/hasDuplicates\";\n\nexport function getEasyArray(){\n    let easyArray = [\"Korea (Republic of)\", \"Netherlands\", \"Indonesia\",\n    \"Mayotte\", \"Antarctica\", \"Israel\", \"Canada\", \"Switzerland\", \"Brazil\", \"Japan\",\n    \"United Kingdom of Great Britain and Northern Ireland\", \"Sweden\", \"Turkey\", \"Germany\", \"United States of America\",\n    \"Spain\", \"Cyprus\", \"Slovakia\", \"Greece\", \"Austria\", \"Croatia\", \"Italy\", \"Denmark\", \"Russian Federation\",\n    \"Poland\", \"France\", \"China\", \"Uruguay\", \"Belgium\", \"Czech Republic\", \"Ukraine\", \"Holy See\", \"Norway\", \"Portugal\", \"Sudan\", \"Finland\", \"Nepal\", \"New Zeland\", \"Iceland\", \"United States Minor Outlying Islands\"];\n    hasDuplicates(easyArray);\n    return easyArray;\n}   \nexport function getMediumArray(){\n    let mediumArray = [\"Australia\", \"Puerto Rico\", \"Korea (Democratic People's Republic of)\",\n    \"Mexico\", \"Macedonia (the former Yugoslav Republic of)\",\n    \"Saint Martin (French part)\", \"Malta\", \"Luxembourg\", \"Ireland\", \"Bulgaria\", \"Republic of Kosovo\", \"Iraq\", \"India\",\n    \"Egypt\", \"Chile\", \"Mongolia\", \"Lithuania\", \"Montenegro\", \"Viet Nam\", \"Jamaica\",\n    \"Slovenia\", \"Albania\", \"Hungary\", \"Belarus\",\n    \"Estonia\", \"Romania\", \"Saudi Arabia\", \"Nicaragua\", \"Venezuela (Bolivarian Republic of)\", \"Syrian Arab Republic\", \"Serbia\", \"Hong Kong\", \"Argentina\"];\n    hasDuplicates(mediumArray);\n    return mediumArray;\n}  \nexport function getHardArray(){\n    let hardArray = [\"Tunisia\", \"Liechtenstein\", \"Bosnia and Herzegovina\", \"Greenland\", \"Kenya\", \"Georgia\", \"Thailand\", \"Panama\", \"Jersey\", \"Bhutan\", \"Cambodia\", \"Tobago\",\n    \"Kuwait\", \"Haiti\", \"Algieria\", \"Lebanon\", \"Sri Lanka\", \"Libya\", \"Colombia\", \"Ecuador\", \"Paraguay\", \"Afghanistan\", \"San Marino\", \"Sudan\", \"Andora\", \"Senegal\", \"Somalia\",\n    \"Turkmenistan\", \"Pakistan\", \"Iran\", \"Peru\", \"Cuba\", \"Honduras\", \"Jordan\", \"Uzbekistan\", \"South Georgia and the South Sandwich Islands\", \"Papua New Guinea\", \"Cook Islands\",\n    \"Virgin Islands (British)\", \"Heard Island and McDonald Islands\", \"Western Sahara\", \"Åland Islands\", \"French Southern Territories\", \"Nigeria\"];\n    hasDuplicates(hardArray);\n    return hardArray;\n}  \nexport function getMasterArray(easyArray, mediumArray, hardArray, countryArray) {\n    let j = 0;\n    let masterArray = [];\n    let currCountry;\n    for (let i = 0; i < countryArray.length; i++) {\n        currCountry = countryArray[i].name;\n        if (!easyArray.includes(currCountry) &&\n            !mediumArray.includes(currCountry) &&\n            !hardArray.includes(currCountry)) {\n            masterArray[j] = currCountry;\n            j++;\n        }\n    }\n    hasDuplicates(masterArray);\n    return masterArray;\n}","export function setCursorType(htmlElements, cursorType) {\n    if (typeof cursorType != \"string\") {\n        throw Error(\"Second argument must be a string.\");\n    }\n    let i;\n    for (i = 0; i < htmlElements.length; i++) {\n        htmlElements[i].style.cursor = cursorType;\n    }\n}\n","\nexport function Persistence() {\n    this.get = (key) => {\n        return localStorage.getItem(key);\n    }\n    this.put = (key, value) => {\n        localStorage.setItem(key, value);\n     }\n}","export function toggleActivePlayer(player1Score, player2Score) {\n    player1Score.classList.toggle(\"activePlayer\");\n    player2Score.classList.toggle(\"activePlayer\");\n}\n","export function restoreOriginalItemsIfOutOfItems(difficultyCoutriesObj, difficulty, itemsArrCoreName) {\n    if (difficultyCoutriesObj[difficulty].length < 2) {\n        difficultyCoutriesObj[difficulty] = eval(difficulty + itemsArrCoreName).slice();\n    }\n}\n","/* eslint no-console: 1 */\nimport { Player } from \"../module-game/player-module-v2\";\nimport { Game } from \"../module-game/game-module-v2\";\nimport { getAPIDataAsJsObjects } from \"../module-universal/api-data-fetcher\";\nimport { getRandomInt } from \"../module-universal/get-random-int\";\nimport { setRadioButtons } from \"../module-view/btn-utills\";\nimport { extractElementsProperties } from \"../module-country-api/extract-country-names\";\nimport { updateScore } from \"../module-game/update-score\";\nimport { renderResult } from \"../module-view/render-result\";\nimport { shuffle } from \"../module-universal/array-utilities/shuffle\";\nimport { getUserAnswer } from \"../module-view/get-user-answer\";\nimport { getLevelItemsArrMap as getLevel_ItemsArr_Map } from \"../module-country-api/extract-country-names\";\nimport { getEasyArray, getMediumArray, getHardArray, getMasterArray } from \"../module-country-api/immutable-arrays\";\nimport { setCursorType } from \"../module-view/set-cursor-type\";\nimport { Persistence } from \"../module-persistence/persistence\";\nimport { toggleActivePlayer as changeActivePlayerColor } from \"../module-game/toggle-active-player\";\nimport { restoreOriginalItemsIfOutOfItems } from \"../module-game/restore-original-items-if-out-of-items\";\n\n/* ----------------------- HTML elements -------------------------- */\nconst flagImg = document.getElementById(\"flag\");\nconst firstOption = document.querySelector(\"#options .option:nth-of-type(1) label\");\nconst secondOption = document.querySelector(\"#options .option:nth-of-type(2) label\");\nconst thirdOption = document.querySelector(\"#options .option:nth-of-type(3) label\");\nconst topRadioButton = document.getElementById(\"choice1\");\nconst middleRadioButton = document.getElementById(\"choice2\");\nconst bottomRadioButton = document.getElementById(\"choice3\");\nconst renderedAnswer = document.getElementById(\"answer\");\nconst playerResult = document.getElementById(\"result\");\nconst optionsPanel = document.querySelector(\"form\");\nconst player1Score = document.querySelector(\"#rightScore\");\nconst player2Score = document.querySelector(\"#leftScore\");\nconst optionsMenuItem = document.querySelector(\"#settings\");\nconst player1MatchScore = document.querySelector(\"#p1MatchScore\");\nconst player2MatchScore = document.querySelector(\"#p2MatchScore\");\nconst resetBtn = document.querySelector(\"#resetBtn\");\nconst optionsSection = document.querySelector(\"#optionsPage\");\nconst gameSection = document.querySelector(\"#gamePage\");\nconst levelChoice = document.querySelector(\"#level-select\");\nconst radioBtns = document.querySelectorAll(\"input[type=radio]\");\nconst cursorClassElements = document.querySelectorAll(\".pointer\");\nconst playMenuItem = document.querySelector(\"#play\");\nconst nextQuestionBtn = document.getElementById(\"nextBtn\");\nconst nextQuestionBtnContainer = document.getElementById(\"nextBtnDiv\");\n\n/* -----------------------  other variables  -------------------------- */\nconst API_URL = \"https://restcountries.eu/rest/v2/all\";\nconst player1 = new Player(1);\nconst player2 = new Player(2);\nlet opt2;\nlet opt3;\nlet countryArray;\nlet options = [];\nlet correctAnswer;\nlet nextFlagAllowed = false;\nlet difficultyName = \"medium\";\nlet indexOfAnswer = 0;\nlet masterFlagsImmutable = [];\nconst persistence = new Persistence();\nconst easyFlagsImmutable = getEasyArray();\nconst mediumFlagsImmutable = getMediumArray();\nconst hardFlagsImmutable = getHardArray();\nlet level_ItemsArr_Map;\nlet flagsPerMatch = Math.round((mediumFlagsImmutable.length - 1) / 2);\nlet game = new Game(\"Flag game\", flagsPerMatch);\n\n\n/* ----------------------- devMode settings  -------------------------- */\n// comment out to turn on production mode\n/* const devMode = true;\nif (devMode) {\n    flagsPerMatch = 3;\n    game = new Game(\"Flag game\", flagsPerMatch);\n}  */\n/* -----------------------  logic  -------------------------- */\n\ninit();\n\n/* -------------------------- Event listeners ---------------------------- */\nlevelChoice.addEventListener(\"change\", function () {\n    difficultyName = levelChoice.value;\n    flagsPerMatch = setQuestionNumber();\n    const currPlayerWhenChangeLVL = game.getCurrentPlayer();\n    game = new Game(\"Flag game\", flagsPerMatch);\n    game.setCurrentPlayer(currPlayerWhenChangeLVL);\n    renderCurrentMatchScore();\n    reset();\n});\n\noptionsPanel.addEventListener(\"change\", function (event) {\n    nextFlagAllowed = true;\n    nextQuestionBtn.classList.remove(\"invisible\");\n    nextQuestionBtn.classList.add(\"visible\");\n    setRadioButtons([topRadioButton, middleRadioButton, bottomRadioButton], \"disabled\", true);\n    const userAnswer = getUserAnswer(radioBtns);\n    renderAnswer(Number(userAnswer) === correctAnswer);\n    changeTurn();\n    renderCurrentMatchScore();\n    event.preventDefault();\n}, false);\n\nnextQuestionBtn.addEventListener(\"click\", function () {\n    if (nextQuestionBtnContainer.classList.contains(\"bigMargin\") === true) {\n        nextQuestionBtnContainer.classList.remove(\"bigMargin\");\n        nextQuestionBtnContainer.classList.add(\"normalMargin\");\n    }\n    if (nextFlagAllowed) {\n        reset();\n        nextFlagAllowed = false;\n        nextQuestionBtn.classList.add(\"invisible\");\n    }\n});\n\noptionsMenuItem.addEventListener(\"click\", function () {\n    switchOptionsAndGamePage();\n});\n\nplayMenuItem.addEventListener(\"click\", function () {\n    switchOptionsAndGamePage();\n});\n\nresetBtn.addEventListener(\"click\", function () {\n    game.resetCurrentTurn();\n    persistTotalMatchesScore();\n    if (player2Score.classList.contains(\"activePlayer\")) {\n        changeActivePlayerColor(player1Score, player2Score);\n    }\n    game.setCurrentPlayer(player1);\n    zeroTheScores();\n    renderTottalMatches();\n    renderCurrentMatchScore();\n});\n\n\n\n/* ------------------------------ main methods --------------------------- */\n\nasync function init() {\n    countryArray = await getAPIDataAsJsObjects(API_URL);\n    setUpDifficultyLevelsWithMatchingItems();\n    setupPlayers();\n    reset();\n    if (persistence.get(\"player1\") === null) {\n        persistTotalMatchesScore();\n    }\n    // view\n    renderInitialView();\n\n    function renderInitialView() {\n        renderCurrentMatchScore();\n        styleOptionsAndPlaySections();\n        renderTottalMatches();\n        setCursorType(cursorClassElements, \"pointer\");\n        player1Score.classList.add(\"activePlayer\");\n        optionsSection.classList.add(\"invisible\");\n        playMenuItem.classList.add(\"bold\");\n    }\n\n    function setUpDifficultyLevelsWithMatchingItems() {\n        masterFlagsImmutable = getMasterArray(easyFlagsImmutable, mediumFlagsImmutable, hardFlagsImmutable, countryArray);\n        level_ItemsArr_Map = getLevel_ItemsArr_Map(easyFlagsImmutable.slice(), mediumFlagsImmutable.slice(), hardFlagsImmutable.slice(), masterFlagsImmutable.slice());\n    }\n\n    function styleOptionsAndPlaySections() {\n        optionsMenuItem.classList.remove(\"bold\");\n        playMenuItem.classList.add(\"bold\");\n        gameSection.classList.remove(\"invisible\");\n        optionsSection.classList.add(\"invisible\");\n        optionsSection.classList.remove(\"visible\");\n        gameSection.classList.add(\"visible\");\n    }\n\n    function setupPlayers() {\n        game.addPlayer(player1);\n        game.addPlayer(player2);\n        game.setCurrentPlayer(player1);\n    }\n}\nfunction persistTotalMatchesScore() {\n    persistence.put(\"player1\", Number(0));\n    persistence.put(\"player2\", Number(0));\n}\n\nfunction initNewMatch() {\n    nextQuestionBtnContainer.classList.remove(\"normalMargin\");\n    nextQuestionBtnContainer.classList.add(\"bigMargin\");\n    renderMatchResult();\n    changeActivePlayerColor(player1Score, player2Score);\n    zeroTheScores();\n    renderCurrentMatchScore();\n    renderTottalMatches();\n}\n\nfunction zeroTheScores() {\n    player1.setScore(0);\n    player2.setScore(0);\n}\n\nfunction changeTurn() {\n    if (game.getCurrentTurn() < game.getNoOfTurns()) {\n        game.incrementTurn();\n    } else {\n        if (game.getCurrentPlayer().getId() === player1.getId()) {\n            changeActivePlayerColor(player1Score, player2Score);\n            game.setCurrentPlayer(player2);\n        } else {\n            game.setCurrentPlayer(player1);\n            initNewMatch();\n        }\n        game.resetCurrentTurn();\n    }\n}\n\nasync function reset() {\n    playerResult.innerHTML = \"\";\n    renderedAnswer.innerHTML = \"\";\n    options = generateOptionsAsIndexes(level_ItemsArr_Map); // np 56, 78, 134\n    correctAnswer = options[0]; // 56\n    shuffle(options);\n    renderCountryNamesOnBtns(extractElementsProperties(options, countryArray, \"name\"));\n    setFlagUrl(extractFlag(correctAnswer));\n    const optionsRadioButtons = [topRadioButton, middleRadioButton, bottomRadioButton];\n    setRadioButtons(optionsRadioButtons, \"disabled\", false);\n    setRadioButtons(optionsRadioButtons, \"checked\", false);\n}\n/* ---------------------------helpers---------------------------- */\nfunction renderCountryNamesOnBtns() {\n    firstOption.innerText = countryArray[options[0]].name;\n    secondOption.innerText = countryArray[options[1]].name;\n    thirdOption.innerText = countryArray[options[2]].name;\n    topRadioButton.value = options[0];\n    middleRadioButton.value = options[1];\n    bottomRadioButton.value = options[2];\n}\n\nfunction setFlagUrl(flag) {\n    flagImg.src = flag;\n}\n\nfunction extractFlag(correctAnswer) {\n    return countryArray[correctAnswer].flag;\n}\n\nfunction renderCurrentMatchScore() {\n    player1Score.innerHTML = player1.getScore() + \"/\" + game.getNoOfTurns();\n    player2Score.innerHTML = \"  :  \" + player2.getScore() + \"/\" + game.getNoOfTurns();\n\n}\nfunction renderTottalMatches() {\n    player1MatchScore.innerHTML = persistence.get(\"player1\");\n    player2MatchScore.innerHTML = \"  :  \" + persistence.get(\"player2\");\n}\n\nfunction generateOtherCountries() {\n    opt2 = getRandomInt(0, countryArray.length);\n    opt3 = getRandomInt(0, countryArray.length);\n}\n\nfunction generateOptionsAsIndexes(difficultyCountriesObj) {\n    generateOtherCountries();\n    restoreOriginalItemsIfOutOfItems(difficultyCountriesObj, difficultyName, \"FlagsImmutable\");\n    const mutableArray = difficultyCountriesObj[difficultyName];\n    const randomIndex = getRandomInt(0, mutableArray.length);\n    const opt1 = mutableArray[randomIndex];\n    mutableArray.splice(randomIndex, 1);\n    for (let i = 0; i < countryArray.length; i++) {\n        if (opt1 === countryArray[i].name) {\n            indexOfAnswer = i;\n        }\n    }\n    while (opt2 === indexOfAnswer || indexOfAnswer === opt3 || opt2 === opt3) {\n        generateOtherCountries();\n    }\n    return [indexOfAnswer, opt2, opt3];\n}\n\nfunction renderMatchResult() {\n    if (game.isDraw()) {\n        playerResult.innerHTML = \"It is a draw!!!! No more \" + difficultyName + \" flags availeble for this level. Play again with the same flags or change difficulty in the options.\";\n    }\n    else {\n        if (player1.getScore() > player2.getScore()) {\n            renderCurrentMatchEndMsg(\"player1\");\n        }\n        else {\n            renderCurrentMatchEndMsg(\"player2\");\n        }\n    }\n}\nfunction renderCurrentMatchEndMsg(winner) {\n    const score = persistence.get(winner);\n    persistence.put(winner, Number(score) + 1); // We persist only total matches, not current score\n    playerResult.innerHTML = \"player \" + ((winner === \"player1\") ? \"one\" : \"two\") + \" has won. \" + \"No more \" + difficultyName + \" flags availeble for this level. Play again with the same flags or change difficulty in the options.\";\n}\nconst setQuestionNumber = () => Math.round((eval(difficultyName + \"FlagsImmutable\").length - 1) / 2);\nfunction renderAnswer(userGuessed) {\n    if (userGuessed) {\n        changeAnswerColor(userGuessed);\n        renderResult(\"Correct!\", renderedAnswer);\n        updateScore(game);\n    }\n    else {\n        changeAnswerColor(userGuessed);\n        renderResult(\"Inncorect! Correct answer is \" + countryArray[correctAnswer].name, renderedAnswer);\n    }\n}\nfunction changeAnswerColor(userGuessed) {\n    if (userGuessed) {\n        renderedAnswer.classList.remove(\"red\");\n        renderedAnswer.classList.add(\"green\");\n    } else {\n        renderedAnswer.classList.remove(\"green\");\n        renderedAnswer.classList.add(\"red\");\n    }\n}\nfunction switchOptionsAndGamePage() {\n    optionsMenuItem.classList.toggle(\"bold\");\n    playMenuItem.classList.toggle(\"bold\");\n    gameSection.classList.toggle(\"invisible\");\n    optionsSection.classList.toggle(\"invisible\");\n    optionsSection.classList.toggle(\"visible\");\n    gameSection.classList.toggle(\"visible\");\n}"]}