{"version":3,"sources":["modulev2/player-module-v2.js","modulev2/game-module-v2.js","javascripts/index.js"],"names":["Player","playerId","id","score","getId","getScore","Number","setScore","playerScore","Error","toString","Game","gameName","numberOfTurns","name","noOfTurns","currentPlayer","undefined","players","currentTurn","getGameName","addPlayer","player","push","removePlayer","initialLength","length","filter","p","getNoOfPlayers","setNoOfTurns","getNoOfTurns","incrementTurn","resetCurrentTurn","getCurrentTurn","getCurrentPlayer","setCurrentPlayer","getWinners","result","_isDrawInternal","winners","forEach","highestScore","isDraw","frequency","map","Map","currScore","has","set","get","flagImg","document","getElementById","first","querySelector","second","third","firstInput","secondInput","thirdInput","firstCircle","secondCircle","thirdCircle","answer","form","p1Score","p2Score","p1MatchScore","p2MatchScore","resetBtn","levelNumber","matchNumber","playersNumber","radioBtns","querySelectorAll","NUMBER_OF_OPTIONS","gameNumber","API_URL","countryArray","options","correctAnswer","next","userAnswer","flagsPerMatch","nextFlagAllowed","level","game","player1","player2","init","initGame","classList","add","localStorage","getItem","setItem","renderScores","addEventListener","event","disableRadioButtons","getUserAnswer","renderAnswer","changeTurn","preventDefault","reset","i","checked","value","disabled","userGuessed","remove","renderResult","updateScore","requestCountryData","console","log","initNewMatch","innerHTML","currPlayer","generateOptionsAsIndexes","shuffle","renderCountryNamesOnBtns","extractCountryNames","setFlagUrl","extractFlag","opt1","getRandomInt","opt2","opt3","generateCorrectAnswer","index","response","fetch","json","error","msg","min","max","maxExclusive","Math","ceil","floor","random","countryNames","innerText","flag","src","names","countryNmb","array","j","temp"],"mappings":";;AEAA;;AACA;;AACA;AACA,ADHA,ADAO,SAASA,MAAT,CAAgBC,QAAhB,EAAyB;AAC5B;AEKJ,ADFO,ADFH,QAAMC,CCEMS,CDFJ,GCEL,ADFQV,CCEMW,ODFjB,CCEG,EAAwBC,aAAxB,EAAuC;ACG9C,ADFI,ADFA,IEIAsC,EFJIhD,ECEEW,GCEC,AFJE,CCEC,ECEAsC,AFJE,CCECxC,ADFb,OEIkB,CAACyC,ADFnB,cCEU,CAAwB,MAAxB,CAAd;AACA,ADFI,ICEAC,EDFIvC,GCEC,GAAGqC,GDFK,GAAGvC,ECEA,CAAC0C,UDFjB,GCEQ,CAAuB,uCAAvB,CAAZ;AACA,ADDI,ADFA,IEGAC,EDDIxC,CDFCZ,GEGC,EFHN,CEGSgD,EFHI,ICEI,ECCA,AFHE,CEGDG,ADDEtC,SAApB,ICCS,CAAuB,uCAAvB,CAAb;AACA,ADDI,ADFI,IEGJwC,EDDIvC,GCCC,EFHMhB,CEGHkD,CDDG,ADFP,GCEU,EAAd,ECCgB,CAACG,aAAT,CAAuB,uCAAvB,CAAZ;AACA,ADDI,ADFC,GAFD,CEKAG,EDDIvC,QCCM,GAAGiC,ADDE,GAAG,CAAlB,ICCqB,CAACC,cAAT,CAAwB,SAAxB,CAAjB;AACA,IAAIM,WAAW,GAAGP,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAlB;AACA,ADDI,ADFA,IEGAO,GDDKxC,ADFAf,OEGK,CFHV,EEGa+C,CDDb,ADFgB,GCEG,GDFG,CEGD,CAACC,CDDG,aCCZ,CAAwB,SAAxB,CAAjB;AACA,ADDQ,ADFA,IEGJQ,ODDW/C,ADFAR,IEGA,ADDP,EDFa,CEGH8C,AFHIjD,KAAD,CAAb,EEGkB,CAACkD,cAAT,CAAwB,WAAxB,CAAlB;AACA,ADDK,ADFA,GCAD,ADFA,CEKAS,AFf4B,CAa5B,WEEY,GAAGV,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAnB;AACA,IAAIU,WAAW,GAAGX,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAlB;AACA,ADDI,ICCAW,GDDK3C,GCCC,GAAG+B,GDDT,GAAkB9B,ECCD,CAAC+B,GDDD,IAAY,OCCpB,CAAwB,QAAxB,CAAb;AACA,ADDQnC,ADHJ,IEIA+C,ADDI/C,GDHCX,CEID,GAAG6C,ADDI,CAAC7B,GDHZ,CCGI,CAAaD,CDHAd,CEIF,CAAC+C,GDDZ,MDHY,IEIT,AFJ0B,CEIH,MAAvB,CAAX;AACA,ADDK,ADHG,GCCJ,CCGAW,IFJQ1D,GEID,GAAG4C,KFJS,GEID,AFJI,CEIHG,AFJf,EAAqB,WEIf,CAAuB,aAAvB,CAAd;AACA,AFJY,IEIRY,OAAO,CFJO,EEIJf,EFJQ3C,KAAJ,CEII,AFJM,CEIL8C,aAAT,CAAuB,WFJnB,CEIJ,AFJF,CEIZ;AAEA,ADFI,ADHK,IEKLa,GDFK5C,SCEO,GAAG4B,ADFf,GAAqB9B,KCEE,CAACiC,ADFJ,IAAY,SCEjB,CAAuB,eAAvB,CAAnB;AACA,ADFQ,ICEJc,IDFQ5C,QCEI,GAAG2B,EDFM,GAAGlC,GCED,CAACqC,GDFO,CAAC7B,MAA5B,GCEW,CAAuB,eAAvB,CAAnB;AACA,ADFQR,ADJAf,IEMJmE,ADFIpD,ADJAf,KAAK,ECIE,CCEH,AFNIG,ECIEY,CCEHkC,GFNO,CAAC5C,ECIE,CAACmB,CCEH,CAAC4B,IDFN,CAAe3B,CAAC,ADJZ,CAAd,GCI8BA,CAAC,CAAC1B,CCEzB,CAAuB,ADFA,KAASoB,MCEhC,ADFsC,CCErD,ADFsDpB,EAApC,CAAV;ACGR,AFNK,GALD,CEWAqE,WAAW,GAAGnB,QAAQ,CAACG,aAAT,CAAuB,cAAvB,CAAlB;AACA,ADFQ,ICEJiB,IDFQ/C,OCEG,GAAG2B,GDFO,KCEC,ADFIlC,CCEHqC,MDFU,CAAC7B,MCEpB,ADFV,CCEiC,CDFK,aCE5B,CAAlB;AACA,ADFY,ADJR,IEMA+C,GFNK/D,KCIS,GDJd,CCIkBD,CCEL,CFNG,EEMA2C,CDFF,CAAU,EDJF,IEME,CAACG,aAAT,CAAuB,gBAAvB,CAApB,ODFkB,CAAN;ACIZ,ADHS,ADJD,IEOJmB,OFPW,EEOF,GAAGtB,IFPQlD,EAAT,EEOS,CAACyE,AFPI,WAAd,GAA4BxE,EEO3B,CAA0B,EFPlC,iBEOQ,CAAhB,EACA;ADHK,ADJA,GCHD,ADCA;AEUJ,AFPC,MEOKyE,iBAAiB,GAAG,CAA1B;AACA,ADHI,ICGAC,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","file":"javascripts.ea2fe77b.js","sourceRoot":"../src","sourcesContent":["export function Player(playerId){\n    // 1\n    const id = playerId;\n    let score = 0;\n\n\n    this.getId = () => {\n        return id;\n    }\n  \n    this.getScore = () => {\n        return Number(score);\n    }\n    // 2 3 \n    this.setScore = (playerScore) => {\n        if (playerScore < 0) {\n            throw new Error(\"Score cannot be negative\");\n        }\n        score = Number(playerScore);\n    }\n\n    this.toString = () => {\n        return \"id: \" + id + \", score: \" + score;\n    };\n}","import { Player } from \"./player-module-v2\";\n\n\n\nexport function Game(gameName, numberOfTurns) {\n    const name = gameName;\n    let noOfTurns = numberOfTurns;\n\n    let currentPlayer = undefined;\n    let players = [];\n    let currentTurn = 1;\n\n    this.getGameName = () => {\n        return name;\n    }\n\n    this.addPlayer = (player) => {\n        players.push(player);\n    }\n\n    this.removePlayer = (player) => {\n        let initialLength = players.length;\n        players = players.filter(p => p.id !== player.id);\n\n        if (initialLength === players.length) {\n            throw new Error(\"Cannot remove the player. Player not found.\");\n        }\n    }\n\n    this.getNoOfPlayers = () => {\n        return players.length;\n    }\n\n    this.setNoOfTurns = (numberOfTurns) => {\n        noOfTurns = numberOfTurns;\n    }\n\n    this.getNoOfTurns = () => {\n        return noOfTurns;\n    }\n    \n    this.incrementTurn = () => {\n        if (currentTurn < noOfTurns) {\n            currentTurn++;\n        } else {\n            throw new Error(\"Current turn can not be larger than total number of turns.\");\n        }\n    }\n\n    this.resetCurrentTurn = () => {\n        currentTurn = 1;\n    }\n\n    this.getCurrentTurn = () => {\n        return currentTurn;\n    }\n\n    this.getCurrentPlayer = () => {\n        return currentPlayer;\n    }\n\n    this.setCurrentPlayer = (player) => {\n        currentPlayer = player;\n    }\n\n    this.getWinners = () => {\n        const result = _isDrawInternal();\n        const winners = [];\n\n        players.forEach(p => {\n            if (p === result.highestScore) {\n                winners.push(p);\n            }\n        });\n        return winners;\n\n    }\n\n    this.isDraw = () => {\n        let result = this._isDrawInternal();\n        return result.frequency > 1 ? true : false;\n    }\n\n    this._isDrawInternal = () => {\n        let highestScore = 0;\n        let map = new Map();\n\n        players.forEach(p => {\n            const currScore = p.getScore();\n            highestScore = currScore > highestScore ? currScore : highestScore;\n            //let frequency = map.get(currScore);\n            // if frequency is null/undefined/0/\"\" the next line is false\n            if (map.has(currScore)) {\n                map.set(currScore, map.get(currScore) + 1);\n            } else {\n                map.set(currScore, 1);\n            }\n        });\n      \n        return {\n            highestScore: highestScore,\n            frequency: map.get(highestScore)\n        };\n\n    }\n\n    this.toString = () => {\n        return \"name: \" + name + \", noOfTurns: \" + noOfTurns + \", currTurn: \" + currentTurn + \", currPlayer: \" + currentPlayer +\n            \"\\nplayers: \" + players.toString();\n    }\n} ","import { Player } from \"../modulev2/player-module-v2\";\nimport { Game } from \"../modulev2/game-module-v2\";\n// set constants for number of options, country array\n// vars: options(array which keeps indexes), correctAnswer(index), userAnswer(index),   \n\n\n/* ----------------------- HTML elements -------------------------- */\nlet flagImg = document.getElementById(\"flag\");\nlet first = document.querySelector(\"#options .option:nth-of-type(1) label\");\nlet second = document.querySelector(\"#options .option:nth-of-type(2) label\");\nlet third = document.querySelector(\"#options .option:nth-of-type(3) label\");\nlet firstInput = document.getElementById(\"choice1\");\nlet secondInput = document.getElementById(\"choice2\");\nlet thirdInput = document.getElementById(\"choice3\");\nlet firstCircle = document.getElementById(\"circleOne\");\nlet secondCircle = document.getElementById(\"circleTwo\");\nlet thirdCircle = document.getElementById(\"circleThree\");\nlet answer = document.getElementById(\"answer\");\nlet form = document.querySelector(\"form\");\nlet p1Score = document.querySelector(\"#rightScore\");\nlet p2Score = document.querySelector(\"#leftScore\");\n\nlet p1MatchScore = document.querySelector(\"#p1MatchScore\");\nlet p2MatchScore = document.querySelector(\"#p2MatchScore\");\nlet resetBtn = document.querySelector(\"#resetBtn\");\nlet levelNumber = document.querySelector(\"#levelNumber\");\nlet matchNumber = document.querySelector(\"#matchNumber\");\nlet playersNumber = document.querySelector(\"#playersNumber\");\n\nlet radioBtns = document.querySelectorAll(\"input[type=radio]\");\n// other variables \nconst NUMBER_OF_OPTIONS = 3;\nlet gameNumber = 1;\nconst API_URL = \"https://restcountries.eu/rest/v2/all\"\nlet countryArray;\nlet options = [];\nlet correctAnswer;\nlet next = document.getElementById(\"nextBtn\");\nlet userAnswer;\nlet flagsPerMatch = 2;\nlet nextFlagAllowed = false;\nlet level = 1;\nlet game = new Game(\"Flag game\", flagsPerMatch);\n\n\nconst player1 = new Player(1);\nconst player2 = new Player(2);\ngame.addPlayer(player1);\ngame.addPlayer(player2);\ngame.setCurrentPlayer(player1);\ninit();\ninitGame();\np1Score.classList.add(\"activePlayer\");\n\n\n\nif (localStorage.getItem(\"player1\") === null) {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    renderScores()\n} else {\n    renderScores()\n}\n/* -------------------------- Event listeners ---------------------------- */\nform.addEventListener(\"change\", function (event) {\n    nextFlagAllowed = true;\n    disableRadioButtons();\n    let userAnswer = getUserAnswer();\n    renderAnswer(Number(userAnswer) === correctAnswer);\n    changeTurn();\n    gameNumber++;\n    renderScores();\n    event.preventDefault();\n}, false);\n\nnext.addEventListener(\"click\", function () {\n    if (nextFlagAllowed) {\n        reset();\n        nextFlagAllowed = false;\n    }\n});\n\nresetBtn.addEventListener(\"click\", function () {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    renderScores();\n});\n\n\nfunction getUserAnswer() {\n    let userAnswer = \"\";\n    for (var i = 0; i < radioBtns.length; i++) {\n        if (radioBtns[i].checked) {\n\n            userAnswer = radioBtns[i].value;\n\n        }\n    }\n    \n\n    return userAnswer;\n}\n\nfunction disableRadioButtons() {\n    firstInput.disabled = true;\n    secondInput.disabled = true;\n    thirdInput.disabled = true;\n}\n\nfunction renderAnswer(userGuessed) {\n    if (userGuessed) {\n        answer.classList.remove(\"red\");\n        answer.classList.add(\"green\");\n        renderResult(\"Correct!\");\n        updateScore();\n    }\n    else {\n        answer.classList.remove(\"green\");\n        answer.classList.add(\"red\");\n        renderResult(\"Inncorect! Correct answer is \" + countryArray[correctAnswer].name);\n    }\n}\n\n/* ------------------------------ main methods --------------------------- */\n\nasync function init() {\n    countryArray = await requestCountryData();\n    reset();\n}\n\nfunction initGame() {\n    console.log(\"Init game\");\n\n\n}\nfunction initNewMatch() {\n    answer.classList.remove(\"red\");\n    answer.classList.remove(\"green\");\n    if (game.isDraw()) {\n        answer.innerHTML = \"There is a draw!!!!\";\n\n    }\n    else {\n        if (player1.getScore() > player2.getScore()) {\n            let score = localStorage.getItem(\"player1\");\n            localStorage.setItem(\"player1\", Number(score) + 1);\n            answer.innerHTML = \"player one has won.\";\n\n        }\n        else {\n            let score = localStorage.getItem(\"player2\");\n            localStorage.setItem(\"player2\", Number(score) + 1);\n            answer.innerHTML = \"player two has won.\";\n        }\n    }\n    p1Score.classList.add(\"activePlayer\");\n    p2Score.classList.remove(\"activePlayer\");\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n}\nfunction updateScore() {\n    console.log(\"Updating score\");\n    let currPlayer = game.getCurrentPlayer();\n    currPlayer.setScore(currPlayer.getScore() + 1);\n\n}\n\nfunction changeTurn() {\n    console.log(\"Change turns\");\n    if (game.getCurrentTurn() < game.getNoOfTurns()) {\n        console.log(\"incrementing turn\");\n        game.incrementTurn();\n    } else {\n\n\n\n        if (game.getCurrentPlayer().getId() === player1.getId()) {\n            console.log(\"swapping players\");\n            p1Score.classList.remove(\"activePlayer\");\n            p2Score.classList.add(\"activePlayer\");\n            game.setCurrentPlayer(player2);\n\n        } else {\n            console.log(\"Current player id\" + game.getCurrentPlayer().getId());\n\n            console.log(\"init new match\");\n            game.setCurrentPlayer(player1);\n            initNewMatch();\n        }\n\n        console.log(\"resetting turn to 0\");\n        game.resetCurrentTurn();\n\n    }\n}\n\nasync function reset() {\n\n    answer.innerHTML = \"\";\n    options = generateOptionsAsIndexes(); // 56, 78, 134\n    correctAnswer = options[0]; // 56\n    shuffle(options);\n    renderCountryNamesOnBtns(extractCountryNames());\n    setFlagUrl(extractFlag(correctAnswer));\n    firstInput.disabled = false;\n    secondInput.disabled = false;\n    thirdInput.disabled = false;\n    firstInput.checked = false;\n    secondInput.checked = false;\n    thirdInput.checked = false;\n}\n\nfunction generateOptionsAsIndexes() {\n    let opt1 = getRandomInt(0, countryArray.length);\n    let opt2 = getRandomInt(0, countryArray.length);\n    let opt3 = getRandomInt(0, countryArray.length);\n    return [opt1, opt2, opt3];\n}\n\nfunction generateCorrectAnswer(options) {\n    let index = getRandomInt(0, options.length);\n    return index;\n}\n\n\n/* ------------------------------ heplers ----------------------------- */\nasync function requestCountryData() {\n    try {\n        let response = await fetch(API_URL);\n        let countryArray = await response.json();\n        return countryArray;\n    } catch (error) {\n        console.log(error);\n    }\n}\nfunction renderResult(msg) {\n    answer.innerHTML = msg;\n}\n/**\n * Returns a random number between min (inclusive) and max(exclusive)\n */\nfunction getRandomInt(min, max) {\n    let maxExclusive = true;\n    min = Math.ceil(min);\n    max = maxExclusive ? Math.floor(max) - 1 : Math.floor(max);\n    let random = Math.floor(Math.random() * (max - min + 1)) + min;\n    return random;\n}\n\nfunction renderCountryNamesOnBtns(countryNames) {\n    first.innerText = countryArray[options[0]].name;\n    second.innerText = countryArray[options[1]].name;\n    third.innerText = countryArray[options[2]].name;\n    firstInput.value = options[0];\n    secondInput.value = options[1];\n    thirdInput.value = options[2];\n}\n\nfunction setFlagUrl(flag) {\n    flagImg.src = flag;\n}\n\nfunction extractCountryNames() {\n    let names = [];\n    let countryNmb;\n    for (let i = 0; i < options.length; i++) {\n        countryNmb = options[i];\n        names[i] = countryArray[countryNmb].name;\n    }\n    return names;\n}\n\nfunction extractFlag(correctAnswer) {\n    return countryArray[correctAnswer].flag;\n}\nfunction shuffle(array) {\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction renderScores() {\n    p1Score.innerHTML = player1.getScore() + \"/\" + game.getNoOfTurns();\n    p2Score.innerHTML = \"  :  \" + player2.getScore() + \"/\" + game.getNoOfTurns();\n    p1MatchScore.innerHTML = localStorage.getItem(\"player1\");\n    p2MatchScore.innerHTML = \"  :  \" + localStorage.getItem(\"player2\");\n    levelNumber.innerHTML = level;\n    matchNumber.innerHTML = flagsPerMatch;\n    playersNumber.innerHTML = game.getNoOfPlayers();\n}\n//localStorage.getItem(\"player1\") - match score\n//player1.getScore() -- actual score game.getNoOfTurns()"]}