{"version":3,"sources":["modulev2/player-module-v2.js","modulev2/game-module-v2.js","javascripts/index.js"],"names":["Player","playerId","id","score","getId","getScore","Number","setScore","playerScore","Error","toString","Game","gameName","numberOfTurns","name","noOfTurns","currentPlayer","undefined","players","currentTurn","getGameName","addPlayer","player","push","removePlayer","initialLength","length","filter","p","getNoOfPlayers","setNoOfTurns","getNoOfTurns","incrementTurn","resetCurrentTurn","getCurrentTurn","getCurrentPlayer","setCurrentPlayer","getWinners","result","_isDrawInternal","winners","forEach","highestScore","isDraw","frequency","map","Map","currScore","has","set","get","flagImg","document","getElementById","first","querySelector","second","third","firstInput","secondInput","thirdInput","firstCircle","secondCircle","thirdCircle","answer","form","p1Score","p2Score","p1MatchScore","p2MatchScore","resetBtn","levelNumber","matchNumber","playersNumber","radioBtns","querySelectorAll","NUMBER_OF_OPTIONS","gameNumber","API_URL","countryArray","correctAnswer","userAnswer","options","next","flagsPerMatch","nextFlagAllowed","level","game","difficulty","easyFlags","mediumFlags","player1","player2","getUserAnswer","i","checked","value","disableRadioButtons","disabled","renderAnswer","userGuessed","classList","remove","add","renderResult","updateScore","init","requestCountryData","reset","initGame","console","log","initNewMatch","innerHTML","localStorage","getItem","setItem","renderScores","currPlayer","changeTurn","generateOptionsAsIndexes","shuffle","renderCountryNamesOnBtns","extractCountryNames","setFlagUrl","extractFlag","opt1","getRandomInt","opt2","opt3","isCountryHardEnough","opt","response","fetch","json","error","msg","min","max","random","Math","ceil","floor","countryNames","innerText","flag","src","names","countryNmb","array","j","temp","addEventListener","event","preventDefault"],"mappings":"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","file":"javascripts.8fbd9892.js","sourceRoot":"../src","sourcesContent":["export function Player(playerId){\n    // 1\n    const id = playerId;\n    let score = 0;\n\n\n    this.getId = () => {\n        return id;\n    }\n  \n    this.getScore = () => {\n        return Number(score);\n    }\n    // 2 3 \n    this.setScore = (playerScore) => {\n        if (playerScore < 0) {\n            throw new Error(\"Score cannot be negative\");\n        }\n        score = Number(playerScore);\n    }\n\n    this.toString = () => {\n        return \"id: \" + id + \", score: \" + score;\n    };\n}","import { Player } from \"./player-module-v2\";\n\n\n\nexport function Game(gameName, numberOfTurns) {\n    const name = gameName;\n    let noOfTurns = numberOfTurns;\n\n    let currentPlayer = undefined;\n    let players = [];\n    let currentTurn = 1;\n\n    this.getGameName = () => {\n        return name;\n    }\n\n    this.addPlayer = (player) => {\n        players.push(player);\n    }\n\n    this.removePlayer = (player) => {\n        let initialLength = players.length;\n        players = players.filter(p => p.id !== player.id);\n\n        if (initialLength === players.length) {\n            throw new Error(\"Cannot remove the player. Player not found.\");\n        }\n    }\n\n    this.getNoOfPlayers = () => {\n        return players.length;\n    }\n\n    this.setNoOfTurns = (numberOfTurns) => {\n        noOfTurns = numberOfTurns;\n    }\n\n    this.getNoOfTurns = () => {\n        return noOfTurns;\n    }\n    \n    this.incrementTurn = () => {\n        if (currentTurn < noOfTurns) {\n            currentTurn++;\n        } else {\n            throw new Error(\"Current turn can not be larger than total number of turns.\");\n        }\n    }\n\n    this.resetCurrentTurn = () => {\n        currentTurn = 1;\n    }\n\n    this.getCurrentTurn = () => {\n        return currentTurn;\n    }\n\n    this.getCurrentPlayer = () => {\n        return currentPlayer;\n    }\n\n    this.setCurrentPlayer = (player) => {\n        currentPlayer = player;\n    }\n    \n    this.getWinners = () => {\n        const result = _isDrawInternal();\n        const winners = [];\n\n        players.forEach(p => {\n            if (p === result.highestScore) {\n                winners.push(p);\n            }\n        });\n        return winners;\n\n    }\n\n    this.isDraw = () => {\n        let result = this._isDrawInternal();\n        return result.frequency > 1 ? true : false;\n    }\n\n    this._isDrawInternal = () => {\n        let highestScore = 0;\n        let map = new Map();\n\n        players.forEach(p => {\n            const currScore = p.getScore();\n            highestScore = currScore > highestScore ? currScore : highestScore;\n            //let frequency = map.get(currScore);\n            // if frequency is null/undefined/0/\"\" the next line is false\n            if (map.has(currScore)) {\n                map.set(currScore, map.get(currScore) + 1);\n            } else {\n                map.set(currScore, 1);\n            }\n        });\n      \n        return {\n            highestScore: highestScore,\n            frequency: map.get(highestScore)\n        };\n\n    }\n\n    this.toString = () => {\n        return \"name: \" + name + \", noOfTurns: \" + noOfTurns + \", currTurn: \" + currentTurn + \", currPlayer: \" + currentPlayer +\n            \"\\nplayers: \" + players.toString();\n    }\n} ","import { Player } from \"../modulev2/player-module-v2\";\nimport { Game } from \"../modulev2/game-module-v2\";\n// set constants for number of options, country array\n// vars: options(array which keeps indexes), correctAnswer(index), userAnswer(index),   \n\n\n/* ----------------------- HTML elements -------------------------- */\nlet flagImg = document.getElementById(\"flag\");\nlet first = document.querySelector(\"#options .option:nth-of-type(1) label\");\nlet second = document.querySelector(\"#options .option:nth-of-type(2) label\");\nlet third = document.querySelector(\"#options .option:nth-of-type(3) label\");\nlet firstInput = document.getElementById(\"choice1\");\nlet secondInput = document.getElementById(\"choice2\");\nlet thirdInput = document.getElementById(\"choice3\");\nlet firstCircle = document.getElementById(\"circleOne\");\nlet secondCircle = document.getElementById(\"circleTwo\");\nlet thirdCircle = document.getElementById(\"circleThree\");\nlet answer = document.getElementById(\"answer\");\nlet form = document.querySelector(\"form\");\nlet p1Score = document.querySelector(\"#rightScore\");\nlet p2Score = document.querySelector(\"#leftScore\");\n\nlet p1MatchScore = document.querySelector(\"#p1MatchScore\");\nlet p2MatchScore = document.querySelector(\"#p2MatchScore\");\nlet resetBtn = document.querySelector(\"#resetBtn\");\nlet levelNumber = document.querySelector(\"#levelNumber\");\nlet matchNumber = document.querySelector(\"#matchNumber\");\nlet playersNumber = document.querySelector(\"#playersNumber\");\n\nlet radioBtns = document.querySelectorAll(\"input[type=radio]\");\n// other variables \nconst NUMBER_OF_OPTIONS = 3;\nlet gameNumber = 1;\nconst API_URL = \"https://restcountries.eu/rest/v2/all\"\nlet countryArray;\nlet options = [];\nlet correctAnswer;\nlet next = document.getElementById(\"nextBtn\");\nlet userAnswer;\nlet flagsPerMatch = 2;\nlet nextFlagAllowed = false;\nlet level = 1;\nlet game = new Game(\"Flag game\", flagsPerMatch);\nlet difficulty = \"easy\";\nlet easyFlags = [\"Poland\", \"Netherlands\", \"Indonesia\", \"Saudi Arabia\", \"Mayotte\", \"Antarctica\", \"Israel\", \"Canada\", \"Switzerland\", \"Brazil\", \"Japan\", \"United Kingdom of Great Britain and Northern Ireland\", \"Sweden\",\"Turkey\", \"Germany\", \"United States of America\", \"Spain\", \"United Kingdom\", \"Cyprus\",\"Greece\", \"Austria\", \"Croatia\", \"Italy\", \"Russian Federation\",\"Ireland\", \"Poland\", \"France\", \"China\", \"Norway\",\"Portugal\"];\nlet mediumFlags = [\"Mexico\", \"Georgia\", \"Bosnia and Herzegovina\", \"Macedonia (the former Yugoslav Republic of)\", \"Saint Martin (French part)\", \"Malta\", \"Luxembourg\", \"Bulgaria\", \"Tunisia\", \"Republic of Kosovo\", \"Iraq\", \"India\", \"Egypt\",\"Chile\", \"Uruguay\", \"Belgium\", \"Mongolia\", \"Greenland\", \"Lithuania\",\"Montenegro\", \"Holy See\", \"Viet Nam\", \"Slovakia\", \"Slovenia\", \"Albania\", \"Hungary\", \"Czech Republic\", \"Denmark\", \"Macedonia\", \"Belarus\", \"Ukraine\", \"Estonia\", \"Lithuana\", \"Luxenbourg\", \"Latvia\", \"Romania\"];\n\nconst player1 = new Player(1);\nconst player2 = new Player(2);\ngame.addPlayer(player1);\ngame.addPlayer(player2);\ngame.setCurrentPlayer(player1);\ninit();\ninitGame();\np1Score.classList.add(\"activePlayer\");\n\n\n\nif (localStorage.getItem(\"player1\") === null) {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    \n    renderScores()\n} else {\n    renderScores()\n}\n/* -------------------------- Event listeners ---------------------------- */\nform.addEventListener(\"change\", function (event) {\n    nextFlagAllowed = true;\n    next.classList.remove(\"invisible\");\n    next.classList.add(\"visible\");\n\n    disableRadioButtons();\n    let userAnswer = getUserAnswer();\n    renderAnswer(Number(userAnswer) === correctAnswer);\n    changeTurn();\n    gameNumber++;\n    renderScores();\n    event.preventDefault();\n}, false);\n\nnext.addEventListener(\"click\", function () {\n    if (nextFlagAllowed) {\n        reset();\n        nextFlagAllowed = false;\n        next.classList.add(\"invisible\");\n        next.classList.remove(\"visible\");\n\n    }\n});\n\nresetBtn.addEventListener(\"click\", function () {\n    \n    game.resetCurrentTurn();\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    p1Score.classList.add(\"activePlayer\");\n    p2Score.classList.remove(\"activePlayer\");\n    game.setCurrentPlayer(player1);\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n});\n\n\nfunction getUserAnswer() {\n    let userAnswer = \"\";\n    for (var i = 0; i < radioBtns.length; i++) {\n        if (radioBtns[i].checked) {\n\n            userAnswer = radioBtns[i].value;\n\n        }\n    }\n    \n\n    return userAnswer;\n}\n\nfunction disableRadioButtons() {\n    firstInput.disabled = true;\n    secondInput.disabled = true;\n    thirdInput.disabled = true;\n}\n\nfunction renderAnswer(userGuessed) {\n    if (userGuessed) {\n        answer.classList.remove(\"red\");\n        answer.classList.add(\"green\");\n        renderResult(\"Correct!\");\n        updateScore();\n    }\n    else {\n        answer.classList.remove(\"green\");\n        answer.classList.add(\"red\");\n        renderResult(\"Inncorect! Correct answer is \" + countryArray[correctAnswer].name);\n    }\n}\n\n/* ------------------------------ main methods --------------------------- */\n\nasync function init() {\n    countryArray = await requestCountryData();\n    reset();\n}\n\nfunction initGame() {\n    console.log(\"Init game\");\n\n\n}\nfunction initNewMatch() {\n    answer.classList.remove(\"red\");\n    answer.classList.remove(\"green\");\n    if (game.isDraw()) {\n        answer.innerHTML = \"It is a draw!!!!\";\n\n    }\n    else {\n        if (player1.getScore() > player2.getScore()) {\n            let score = localStorage.getItem(\"player1\");\n            localStorage.setItem(\"player1\", Number(score) + 1);\n            answer.innerHTML = \"player one has won.\";\n\n        }\n        else {\n            let score = localStorage.getItem(\"player2\");\n            localStorage.setItem(\"player2\", Number(score) + 1);\n            answer.innerHTML = \"player two has won.\";\n        }\n    }\n    p1Score.classList.add(\"activePlayer\");\n    p2Score.classList.remove(\"activePlayer\");\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n}\nfunction updateScore() {\n    console.log(\"Updating score\");\n    let currPlayer = game.getCurrentPlayer();\n    currPlayer.setScore(currPlayer.getScore() + 1);\n    console.log(\"increasing player score and rendering\");\n}\n\nfunction changeTurn() {\n    if (game.getCurrentTurn() < game.getNoOfTurns()) {\n        game.incrementTurn();\n    } else {\n        if (game.getCurrentPlayer().getId() === player1.getId()) {\n            p1Score.classList.remove(\"activePlayer\");\n            p2Score.classList.add(\"activePlayer\");\n            game.setCurrentPlayer(player2);\n\n        } else {\n            game.setCurrentPlayer(player1);\n            initNewMatch();\n        }\n        game.resetCurrentTurn();\n\n    }\n}\n\nasync function reset() {\n\n    answer.innerHTML = \"\";\n    options = generateOptionsAsIndexes(); // 56, 78, 134\n    correctAnswer = options[0]; // 56\n    shuffle(options);\n    renderCountryNamesOnBtns(extractCountryNames());\n    setFlagUrl(extractFlag(correctAnswer));\n    firstInput.disabled = false;\n    secondInput.disabled = false;\n    thirdInput.disabled = false;\n    firstInput.checked = false;\n    secondInput.checked = false;\n    thirdInput.checked = false;\n}\n\nfunction generateOptionsAsIndexes() {\n    let opt1 = getRandomInt(0, countryArray.length);\n    let opt2 = getRandomInt(0, countryArray.length);\n    let opt3 = getRandomInt(0, countryArray.length);\n    \n    while(opt1 === opt2){\n        opt2 = getRandomInt(0, countryArray.length);\n    }\n    while(opt1 === opt3){\n        opt3 = getRandomInt(0, countryArray.length);\n    }\n    while(opt3 === opt2){\n        opt2 = getRandomInt(0, countryArray.length);\n    }\n    while(isCountryHardEnough(opt1) === false){\n        opt1 = getRandomInt(0, countryArray.length);\n    }\n    return [opt1, opt2, opt3];\n}\n\n/* ------------------------------ heplers ----------------------------- */\nfunction isCountryHardEnough(opt){\n    if(difficulty === \"easy\"){\n        for(let i=0; i<easyFlags.length;i++){\n            if(countryArray[opt].name === easyFlags[i]){\n             return true;   \n            }\n        }\n    }\n    if(difficulty === \"medium\"){\n        for(let i=0; i<mediumFlags.length;i++){\n            if(countryArray[opt].name === mediumFlags[i]){\n             return true;   \n            }\n        }\n    }\n    if(difficulty === \"hard\"){\n        for(let i=0; i<easyFlags.length;i++){\n            if(countryArray[opt].name === easyFlags[i]){\n             return false;   \n            }\n        }\n        for(let i=0; i<mediumFlags.length;i++){\n            if(countryArray[opt].name === mediumFlags[i]){\n             return false;   \n            }\n        }\n        \n        return true;\n    }\n    return false;\n}\nasync function requestCountryData() {\n    try {\n        let response = await fetch(API_URL);\n        let countryArray = await response.json();\n        return countryArray;\n    } catch (error) {\n        console.log(error);\n    }\n}\nfunction renderResult(msg) {\n    answer.innerHTML = msg;\n}\n/**\n * Returns a random number between min (inclusive) and max(exclusive)\n */\nfunction getRandomInt(min, max) {\n    let maxExclusive = true;\n    min = Math.ceil(min);\n    max = maxExclusive ? Math.floor(max) - 1 : Math.floor(max);\n    let random = Math.floor(Math.random() * (max - min + 1)) + min;\n    return random;\n}\n\nfunction renderCountryNamesOnBtns(countryNames) {\n/*     first.innerText = countryArray[options[0]].name;\n    second.innerText = countryArray[options[1]].name;\n    third.innerText = countryArray[options[2]].name; */\n    first.innerText = countryArray[options[0]].name;\n    second.innerText = countryArray[options[1]].name;\n    third.innerText = countryArray[options[2]].name;\n    firstInput.value = options[0];\n    secondInput.value = options[1];\n    thirdInput.value = options[2];\n}\n\nfunction setFlagUrl(flag) {\n    flagImg.src = flag;\n}\n\nfunction extractCountryNames() {\n    let names = [];\n    let countryNmb;\n    for (let i = 0; i < options.length; i++) {\n        countryNmb = options[i];\n        names[i] = countryArray[countryNmb].name;\n    }\n    return names;\n}\n\nfunction extractFlag(correctAnswer) {\n    return countryArray[correctAnswer].flag;\n}\nfunction shuffle(array) {\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction renderScores() {\n    p1Score.innerHTML = player1.getScore() + \"/\" + game.getNoOfTurns();\n    p2Score.innerHTML = \"  :  \" + player2.getScore() + \"/\" + game.getNoOfTurns();\n    p1MatchScore.innerHTML = localStorage.getItem(\"player1\");\n    p2MatchScore.innerHTML = \"  :  \" + localStorage.getItem(\"player2\");\n    levelNumber.innerHTML = level;\n    matchNumber.innerHTML = flagsPerMatch;\n    playersNumber.innerHTML = game.getNoOfPlayers();\n}\n//localStorage.getItem(\"player1\") - match score\n//player1.getScore() -- actual score game.getNoOfTurns()"]}