{"version":3,"sources":["modulev2/player-module-v2.js","modulev2/game-module-v2.js","javascripts/index.js"],"names":["Player","playerId","id","score","getId","getScore","Number","setScore","playerScore","Error","toString","Game","gameName","numberOfTurns","name","noOfTurns","currentPlayer","undefined","players","currentTurn","getGameName","addPlayer","player","push","removePlayer","initialLength","length","filter","p","getNoOfPlayers","setNoOfTurns","getNoOfTurns","incrementTurn","resetCurrentTurn","getCurrentTurn","getCurrentPlayer","setCurrentPlayer","getWinners","result","_isDrawInternal","winners","forEach","highestScore","isDraw","frequency","map","Map","currScore","has","set","get","opt2","opt3","flagImg","document","getElementById","first","querySelector","second","third","firstInput","secondInput","thirdInput","answer","form","p1Score","p2Score","opt","p1MatchScore","p2MatchScore","resetBtn","optionsPage","gamePage","levelChoice","radioBtns","querySelectorAll","playBtn","next","API_URL","countryArray","correctAnswer","options","nextFlagAllowed","difficulty","indexOfAnswer","easyFlagsImmutable","mediumFlagsImmutable","hardFlagsImmutable","easyFlagsMutable","slice","mediumFlagsMutable","hardFlagsMutable","masterFlagsMutable","masterFlagsImmutable","flagsPerMatch","Math","round","game","player1","player2","getUserAnswer","userAnswer","i","checked","value","disableRadioButtons","disabled","renderAnswer","userGuessed","classList","remove","add","renderResult","updateScore","init","requestCountryData","createMasterFlagsArray","reset","initNewMatch","printMatchResult","renderScores","currPlayer","changeTurn","innerHTML","generateOptionsAsIndexes","shuffle","renderCountryNamesOnBtns","extractCountryNames","setFlagUrl","extractFlag","checkIfOutOfFlags","response","fetch","json","error","console","log","msg","getRandomInt","min","max","random","ceil","floor","countryNames","innerText","flag","src","names","countryNmb","array","j","temp","localStorage","getItem","generateOtherCountries","opt1","index","splice","includes","setItem","setQuestionNumber","addEventListener","event","currPlayerWhenChangeLVL","preventDefault"],"mappings":"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","file":"javascripts.d3c37e2f.js","sourceRoot":"../src","sourcesContent":["export function Player(playerId){\n    // 1\n    const id = playerId;\n    let score = 0;\n\n\n    this.getId = () => {\n        return id;\n    }\n  \n    this.getScore = () => {\n        return Number(score);\n    }\n    // 2 3 \n    this.setScore = (playerScore) => {\n        if (playerScore < 0) {\n            throw new Error(\"Score cannot be negative\");\n        }\n        score = Number(playerScore);\n    }\n\n    this.toString = () => {\n        return \"id: \" + id + \", score: \" + score;\n    };\n}","import { Player } from \"./player-module-v2\";\n\n\n\nexport function Game(gameName, numberOfTurns) {\n    const name = gameName;\n    let noOfTurns = numberOfTurns;\n\n    let currentPlayer = undefined;\n    let players = [];\n    let currentTurn = 1;\n\n    this.getGameName = () => {\n        return name;\n    }\n\n    this.addPlayer = (player) => {\n        players.push(player);\n    }\n\n    this.removePlayer = (player) => {\n        let initialLength = players.length;\n        players = players.filter(p => p.id !== player.id);\n\n        if (initialLength === players.length) {\n            throw new Error(\"Cannot remove the player. Player not found.\");\n        }\n    }\n\n    this.getNoOfPlayers = () => {\n        return players.length;\n    }\n\n    this.setNoOfTurns = (numberOfTurns) => {\n        noOfTurns = numberOfTurns;\n    }\n\n    this.getNoOfTurns = () => {\n        return noOfTurns;\n    }\n    \n    this.incrementTurn = () => {\n        if (currentTurn < noOfTurns) {\n            currentTurn++;\n        } else {\n            throw new Error(\"Current turn can not be larger than total number of turns.\");\n        }\n    }\n\n    this.resetCurrentTurn = () => {\n        currentTurn = 1;\n    }\n\n    this.getCurrentTurn = () => {\n        return currentTurn;\n    }\n\n    this.getCurrentPlayer = () => {\n        return currentPlayer;\n    }\n\n    this.setCurrentPlayer = (player) => {\n        currentPlayer = player;\n    }\n    \n    this.getWinners = () => {\n        const result = _isDrawInternal();\n        const winners = [];\n\n        players.forEach(p => {\n            if (p === result.highestScore) {\n                winners.push(p);\n            }\n        });\n        return winners;\n\n    }\n\n    this.isDraw = () => {\n        let result = this._isDrawInternal();\n        return result.frequency > 1 ? true : false;\n    }\n\n    this._isDrawInternal = () => {\n        let highestScore = 0;\n        let map = new Map();\n\n        players.forEach(p => {\n            const currScore = p.getScore();\n            highestScore = currScore > highestScore ? currScore : highestScore;\n            //let frequency = map.get(currScore);\n            // if frequency is null/undefined/0/\"\" the next line is false\n            if (map.has(currScore)) {\n                map.set(currScore, map.get(currScore) + 1);\n            } else {\n                map.set(currScore, 1);\n            }\n        });\n      \n        return {\n            highestScore: highestScore,\n            frequency: map.get(highestScore)\n        };\n\n    }\n\n    this.toString = () => {\n        return \"name: \" + name + \", noOfTurns: \" + noOfTurns + \", currTurn: \" + currentTurn + \", currPlayer: \" + currentPlayer +\n            \"\\nplayers: \" + players.toString();\n    }\n} ","import { Player } from \"../modulev2/player-module-v2\";\nimport { Game } from \"../modulev2/game-module-v2\";\n\n/* ----------------------- HTML elements -------------------------- */\nlet flagImg = document.getElementById(\"flag\");\nlet first = document.querySelector(\"#options .option:nth-of-type(1) label\");\nlet second = document.querySelector(\"#options .option:nth-of-type(2) label\");\nlet third = document.querySelector(\"#options .option:nth-of-type(3) label\");\nlet firstInput = document.getElementById(\"choice1\");\nlet secondInput = document.getElementById(\"choice2\");\nlet thirdInput = document.getElementById(\"choice3\");\nlet answer = document.getElementById(\"answer\");\nlet result = document.getElementById(\"result\");\nlet form = document.querySelector(\"form\");\nlet p1Score = document.querySelector(\"#rightScore\");\nlet p2Score = document.querySelector(\"#leftScore\");\nlet opt = document.querySelector(\"#settings\");\nlet p1MatchScore = document.querySelector(\"#p1MatchScore\");\nlet p2MatchScore = document.querySelector(\"#p2MatchScore\");\nlet resetBtn = document.querySelector(\"#resetBtn\");\nlet optionsPage = document.querySelector(\"#optionsPage\");\nlet gamePage = document.querySelector(\"#gamePage\");\nlet levelChoice = document.querySelector(\"#level-select\");\nlet radioBtns = document.querySelectorAll(\"input[type=radio]\");\nlet playBtn = document.querySelector(\"#play\");\nlet next = document.getElementById(\"nextBtn\");\n// other variables \n\nlet opt2;\nlet opt3;\nconst API_URL = \"https://restcountries.eu/rest/v2/all\"\nlet countryArray;\nlet options = [];\nlet correctAnswer;\nlet nextFlagAllowed = false;\nlet difficulty = \"medium\";\nlet indexOfAnswer = 0;\nlet easyFlagsImmutable = [\"Korea (Republic of)\", \"Netherlands\", \"Indonesia\", \n\"Mayotte\", \"Antarctica\", \"Israel\", \"Canada\", \"Switzerland\", \"Brazil\", \"Japan\", \n\"United Kingdom of Great Britain and Northern Ireland\", \"Sweden\",\"Turkey\", \"Germany\", \"United States of America\", \n\"Spain\", \"Cyprus\", \"Slovakia\", \"Greece\", \"Austria\", \"Croatia\", \"Italy\", \"Denmark\", \"Russian Federation\", \n\"Poland\", \"France\", \"China\", \"Uruguay\", \"Belgium\", \"Czech Republic\", \"Ukraine\", \"Holy See\", \"Norway\",\"Portugal\", \"Sudan\", \"Finland\", \"Nepal\", \"New Zeland\", \"Iceland\", \"United States Minor Outlying Islands\"];\nlet mediumFlagsImmutable = [ \"Australia\", \"Puerto Rico\", \"Korea (Democratic People's Republic of)\",  \n\"Mexico\",   \"Macedonia (the former Yugoslav Republic of)\", \n\"Saint Martin (French part)\", \"Malta\", \"Luxembourg\", \"Ireland\", \"Bulgaria\",  \"Republic of Kosovo\", \"Iraq\", \"India\", \n\"Egypt\",\"Chile\", \"Mongolia\",  \"Lithuania\",\"Montenegro\", \"Viet Nam\", \n\"Slovenia\", \"Albania\", \"Hungary\", \"Macedonia\", \"Belarus\", \n\"Estonia\", \"Romania\", \"Saudi Arabia\", \"Nicaragua\", \"Venezuela (Bolivarian Republic of)\", \"Syrian Arab Republic\", \"Serbia\", \"Hong Kong\", \"Argentina\"];\nlet hardFlagsImmutable = [\"Tunisia\", \"Liechtenstein\", \"Bosnia and Herzegovina\", \"Greenland\", \"Kenya\", \"Georgia\", \"Thailand\", \"Panama\", \"Jersey\", \"Bhutan\", \"Cambodia\", \"Tobago\",\n\"Kuwait\", \"Haiti\", \"Algieria\", \"Lebanon\", \"Sri Lanka\", \"Libya\", \"Jamaica\", \"Colombia\", \"Ecuador\", \"Paraguay\", \"Afghanistan\", \"San Marino\", \"Sudan\", \"Andora\", \"Senegal\", \"Somalia\",\n\"Turkmenistan\", \"Pakistan\", \"Iran\", \"Peru\", \"Cuba\", \"Honduras\", \"Jordan\", \"Uzbekistan\", \"South Georgia and the South Sandwich Islands\", \"Papua New Guinea\", \"Cook Islands\",\n\"Virgin Islands (British)\", \"Heard Island and McDonald Islands\", \"Western Sahara\", \"Åland Islands\", \"French Southern Territories\", \"Nigeria\"];\nlet easyFlagsMutable = easyFlagsImmutable.slice();\nlet mediumFlagsMutable = mediumFlagsImmutable.slice();\nlet hardFlagsMutable = hardFlagsImmutable.slice();\nlet masterFlagsMutable = [];\nlet masterFlagsImmutable = [];\nlet flagsPerMatch = Math.round((mediumFlagsImmutable.length -1)/ 2);\nlet game = new Game(\"Flag game\", flagsPerMatch);\nconst player1 = new Player(1);\nconst player2 = new Player(2);\n\n\n\ngame.addPlayer(player1);\ngame.addPlayer(player2);\ngame.setCurrentPlayer(player1); \ninit();\np1Score.classList.add(\"activePlayer\");\noptionsPage.classList.add(\"invisible\");\nplayBtn.classList.add(\"bold\");\n\nif (localStorage.getItem(\"player1\") === null) {\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    \n    renderScores()\n} else {\n    renderScores()\n}\n\n\n/* -------------------------- Event listeners ---------------------------- */\nlevelChoice.addEventListener(\"change\", function (event) {\ndifficulty = levelChoice.value;\nsetQuestionNumber();\nlet currPlayerWhenChangeLVL = game.getCurrentPlayer();\ngame = new Game(\"Flag game\", flagsPerMatch);\ngame.setCurrentPlayer(currPlayerWhenChangeLVL); \nrenderScores();\nreset();\n});\n\nform.addEventListener(\"change\", function (event) {\n    nextFlagAllowed = true;\n    next.classList.remove(\"invisible\");\n    next.classList.add(\"visible\");\n    disableRadioButtons();\n    let userAnswer = getUserAnswer();\n    renderAnswer(Number(userAnswer) === correctAnswer);\n    changeTurn();\n    renderScores();\n    event.preventDefault();\n}, false);\n\nnext.addEventListener(\"click\", function () {\n    if (nextFlagAllowed) {\n        reset();\n        nextFlagAllowed = false;\n        next.classList.add(\"invisible\");\n        next.classList.remove(\"visible\");\n    }\n});\n\nopt.addEventListener(\"click\", function () {\n        optionsPage.classList.remove(\"invisible\");\n        gamePage.classList.remove(\"visible\");\n        gamePage.classList.add(\"invisible\");\n        optionsPage.classList.add(\"visible\");\n        playBtn.classList.remove(\"bold\");\n        opt.classList.add(\"bold\");\n});\n\nplayBtn.addEventListener(\"click\", function () {\n    opt.classList.remove(\"bold\");\n    playBtn.classList.add(\"bold\");\n    gamePage.classList.remove(\"invisible\");\n    optionsPage.classList.add(\"invisible\");\n    optionsPage.classList.remove(\"visible\");\n    gamePage.classList.add(\"visible\");\n});\n\nresetBtn.addEventListener(\"click\", function () {\n    game.resetCurrentTurn();\n    localStorage.setItem('player1', Number(0));\n    localStorage.setItem('player2', Number(0));\n    p1Score.classList.add(\"activePlayer\");\n    p2Score.classList.remove(\"activePlayer\");\n    game.setCurrentPlayer(player1);\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n});\n\n\nfunction getUserAnswer() {\n    let userAnswer = \"\";\n    for (var i = 0; i < radioBtns.length; i++) {\n        if (radioBtns[i].checked) {\n            userAnswer = radioBtns[i].value;\n        }\n    }\n    return userAnswer;\n}\n\nfunction disableRadioButtons() {\n    firstInput.disabled = true;\n    secondInput.disabled = true;\n    thirdInput.disabled = true;\n}\nfunction renderAnswer(userGuessed) {\n    if (userGuessed) {\n        answer.classList.remove(\"red\");\n        answer.classList.add(\"green\");\n        renderResult(\"Correct!\");\n        updateScore();\n    }\n    else {\n        answer.classList.remove(\"green\");\n        answer.classList.add(\"red\");\n        renderResult(\"Inncorect! Correct answer is \" + countryArray[correctAnswer].name);\n    }\n}\n\n/* ------------------------------ main methods --------------------------- */\n\nasync function init() {\n    countryArray = await requestCountryData();\n    createMasterFlagsArray();\n    masterFlagsMutable = masterFlagsImmutable.slice();\n    reset();\n}\nfunction initNewMatch() {\n    printMatchResult();\n    p1Score.classList.add(\"activePlayer\");\n    p2Score.classList.remove(\"activePlayer\");\n    player1.setScore(0);\n    player2.setScore(0);\n    renderScores();\n}\n\nfunction updateScore() {\n    \n    let currPlayer = game.getCurrentPlayer();\n    currPlayer.setScore(currPlayer.getScore() + 1);\n}\n\nfunction changeTurn() {\n    if (game.getCurrentTurn() < game.getNoOfTurns()) {\n        game.incrementTurn();\n    } else {\n        if (game.getCurrentPlayer().getId() === player1.getId()) {\n            p1Score.classList.remove(\"activePlayer\");\n            p2Score.classList.add(\"activePlayer\");\n            game.setCurrentPlayer(player2);\n\n        } else {\n            game.setCurrentPlayer(player1);\n            initNewMatch();\n        }\n        game.resetCurrentTurn();\n\n    }\n}\n\nasync function reset() {\n    result.innerHTML = \"\";\n    answer.innerHTML = \"\";\n    options = generateOptionsAsIndexes(); // np 56, 78, 134\n    correctAnswer = options[0]; // 56\n    shuffle(options);\n    renderCountryNamesOnBtns(extractCountryNames());\n    setFlagUrl(extractFlag(correctAnswer));\n    firstInput.disabled = false;\n    secondInput.disabled = false;\n    thirdInput.disabled = false;\n    firstInput.checked = false;\n    secondInput.checked = false;\n    thirdInput.checked = false;\n}\n\n\n\n/* ------------------------------ heplers ----------------------------- */\nfunction checkIfOutOfFlags(){\n    if(easyFlagsMutable.length < 1){\n        easyFlagsMutable = easyFlagsImmutable.slice();\n    }\n    if(mediumFlagsMutable.length < 1){\n        mediumFlagsMutable = mediumFlagsImmutable.slice();\n    }\n    if(masterFlagsMutable.length < 1){\n        masterFlagsMutable = masterFlagsImmutable.slice();\n    }\n}\nasync function requestCountryData() {\n    try {\n        let response = await fetch(API_URL);\n        let countryArray = await response.json();\n        return countryArray;\n    } catch (error) {\n        console.log(error);\n    }\n}\nfunction renderResult(msg) {\n    answer.innerHTML = msg;\n}\n/**\n * Returns a random number between min (inclusive) and max(exclusive)\n */\nfunction getRandomInt(min, max) {\n    let maxExclusive = true;\n    min = Math.ceil(min);\n    max = maxExclusive ? Math.floor(max) - 1 : Math.floor(max);\n    let random = Math.floor(Math.random() * (max - min + 1)) + min;\n    return random;\n}\n\nfunction renderCountryNamesOnBtns(countryNames) {\n    first.innerText = countryArray[options[0]].name;\n    second.innerText = countryArray[options[1]].name;\n    third.innerText = countryArray[options[2]].name;\n    firstInput.value = options[0];\n    secondInput.value = options[1];\n    thirdInput.value = options[2];\n}\n\nfunction setFlagUrl(flag) {\n    flagImg.src = flag;\n}\n\nfunction extractCountryNames() {\n    let names = [];\n    let countryNmb;\n    for (let i = 0; i < options.length; i++) {\n        countryNmb = options[i];\n        names[i] = countryArray[countryNmb].name;\n    }\n    return names;\n}\n\nfunction extractFlag(correctAnswer) {\n    return countryArray[correctAnswer].flag;\n}\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nfunction renderScores() {\n    p1Score.innerHTML = player1.getScore() + \"/\" + game.getNoOfTurns();\n    p2Score.innerHTML = \"  :  \" + player2.getScore() + \"/\" + game.getNoOfTurns();\n    p1MatchScore.innerHTML = localStorage.getItem(\"player1\");\n    p2MatchScore.innerHTML = \"  :  \" + localStorage.getItem(\"player2\");\n}\n\n\n\n\nfunction generateOtherCountries(){\n     opt2 = getRandomInt(0, countryArray.length);\n     opt3 = getRandomInt(0, countryArray.length);\n}\n\nfunction generateOptionsAsIndexes() {\n    let opt1;\n    generateOtherCountries();\n    checkIfOutOfFlags();\n    if(difficulty === \"easy\"){\n        let index = getRandomInt(0, easyFlagsMutable.length)\n        opt1 = easyFlagsMutable[index];\n        easyFlagsMutable.splice(index, 1);\n    }if(difficulty === \"medium\"){\n        let index = getRandomInt(0, mediumFlagsMutable.length);\n        opt1 = mediumFlagsMutable[index];\n       mediumFlagsMutable.splice(index, 1);\n    }if(difficulty === \"hard\"){\n        let index = getRandomInt(0, hardFlagsMutable.length);\n        opt1 = hardFlagsMutable[index];\n        hardFlagsMutable.splice(index, 1);\n    }if(difficulty === \"master\"){\n        let index = getRandomInt(0, masterFlagsMutable.length);\n        opt1 = masterFlagsMutable[index];\n        masterFlagsMutable.splice(index, 1);\n    }\n    for(let i=0; i<countryArray.length; i++){\n        if(opt1 === countryArray[i].name){\n            indexOfAnswer = i;\n        }\n    }\n    while(opt2 === indexOfAnswer || indexOfAnswer === opt3 || opt2 === opt3){\n        generateOtherCountries();\n    }\n    return [indexOfAnswer, opt2, opt3];\n}\n\n\n\nfunction createMasterFlagsArray(){\n    let j = 0;\n    for(let i=0; i < countryArray.length; i++){\n        if(easyFlagsImmutable.includes(countryArray[i].name) === false && mediumFlagsImmutable.includes(countryArray[i].name) === false && hardFlagsImmutable.includes(countryArray[i].name) === false){\n            masterFlagsImmutable[j] = countryArray[i].name;\n            j++;\n        }\n    }\n}\n\nfunction printMatchResult(){\n    if (game.isDraw()) {\n        result.innerHTML = \"It is a draw!!!! No more \" + difficulty + \" flags availeble for this level. Play again with the same flags or change difficulty in the options.\";\n    }\n    else {\n        if (player1.getScore() > player2.getScore()) {\n            let score = localStorage.getItem(\"player1\");\n            localStorage.setItem(\"player1\", Number(score) + 1);\n            result.innerHTML = \"player one has won. No more \" + difficulty + \" flags availeble for this level. Play again with the same flags or change difficulty in the options.\";\n        }\n        else {\n            let score = localStorage.getItem(\"player2\");\n            localStorage.setItem(\"player2\", Number(score) + 1);\n            result.innerHTML = \"player two has won. No more \" + difficulty + \" flags availeble for this level. Play again with the same flags or change difficulty in the options.\";\n        }\n    }\n}\n\nfunction setQuestionNumber(){\n    if(difficulty === \"easy\"){\n        flagsPerMatch = Math.round((easyFlagsImmutable.length-1) / 2);\n    }\n    if(difficulty === \"medium\"){\n        answer.classList.add(\"LastAnswer\");\n        flagsPerMatch = Math.round((mediumFlagsImmutable.length -1)/ 2); \n    }\n    if(difficulty === \"hard\"){\n        flagsPerMatch = Math.round((hardFlagsImmutable.length -1)/ 2);\n    }\n    if(difficulty === \"master\"){\n        flagsPerMatch = Math.round((masterFlagsImmutable.length-1) / 2);\n    }\n}"]}